

###
replaces tokens with values
@param target {string} string containing colon-prefixed tokens Ex: "some/path/:user/:repo/issues/:id"
@param tokens {object literal} hash with keyed tokens and their replacement values
###
sprintf = (target, tokens) ->
  Object.keys(tokens).reduce ((ret, key) ->
    ret.replace new RegExp(":" + key, "g"), tokens[key]
  ), target

###
Escape all string values in the object
###
escape = (params) ->
  for key of params
    params[key] = encodeURIComponent(params[key])  if typeof (params[key]) is "string"
  params

###
Decodes JSON and JSONP
###
requestCallback = (callback) ->
  (error, data, response) ->
    if error
      callback error, data, response
    else
      if typeof data is "string"
        try
          callback error, JSON.parse(data), response
        catch e
          callback error, data, response
      else
        callback error, JSON.parse(JSON.stringify(data)), response

class Resteasy

  ###
  PARAMETERS NEEDED:
  @param targetApi {string} Example: "./linkedin"
  @param keys {object-literal} a hash containing the following (can optionally be initialized with tokens already present):
  login: 'applicationId'
  pass: 'applicationSecret'
  [token]: 'optional'
  [token_secret]: 'optional'
  @param callbackUrl {string} usually needs to match the callback url configured on the application on the provider side
  @param [scope] {string} optional
  ###
  constructor = (targetApi, keys, callbackUrl, scope) ->
    
    ###
    setup oauth
    ###
    prepSession = (request) ->
      request.session.resteasy = {}  unless request.session.resteasy
      request.session.resteasy[targetApi] = {}  unless request.session.resteasy[targetApi]
    storeKeys = (request) ->
      prepSession request
      request.session.resteasy[targetApi] = keys
    recoverKeys = (request) ->
      prepSession request
      for token of request.session.resteasy[targetApi]
        keys[token] = request.session.resteasy[targetApi][token]
    url = require("url")
    http = require("http")
    path = require("path")
    querystring = require("querystring")
    paramAppender = "?"
    hasParameters = /\/*\?/i
    map = require(targetApi)
    resteasy = {}
    OAuth = undefined
    oAuthClient = undefined
    if map.oauth and map.oauth.version is "2.0"
    # OAuth 2.0
      OAuth = require("oauth").OAuth2
      oAuthClient = new OAuth(keys.login, keys.pass, map.hosts.oauth, map.oauth.authorize, map.oauth.access)
    else if map.oauth
    # OAuth 1.0
      OAuth = require("oauth").OAuth
      oAuthClient = new OAuth(
        map.hosts.oauth + map.oauth.request,
        map.hosts.oauth + map.oauth.access,
        keys.login,
        keys.pass,
        map.oauth.version,
        callbackUrl,
        "HMAC-SHA1",
        null,
          Accept: "*/*"
          Connection: "close"
      )
  
  ###
  Connect to API by redirecting to their server
  
  @param request {object} reference to the express request object
  @param response {object} reference to the express response object
  ###
  connect = resteasy.connect = (request, response) ->
    if map.oauth.version is "2.0"
      params =
        redirect_uri: callbackUrl
        response_type: "code"

      params.scope = scope  if scope
      params = map.prepConnect(params, keys, scope)  if map.prepConnect
      redirectUrl = oAuthClient.getAuthorizeUrl(params)
      response.redirect redirectUrl
    else
      oAuthClient.getOAuthRequestToken
        oauth_callback: callbackUrl
      , (error, oauth_token, oauth_token_secret, oauth_authorize_url, additional_parameters) ->
        if error
          console.error "[RESTEASY].connect", error
        else
          keys.oauth_token_secret = oauth_token_secret
          keys.oauth_token = oauth_token
          keys.oauth_authorize_url = oauth_authorize_url
          storeKeys request
          redirect = map.hosts.oauth + map.oauth.login + "?oauth_token=" + oauth_token
          redirect = map.prepConnect(redirect, keys, scope)  if map.prepConnect
          response.redirect redirect


  
  ###
  After returning from API redirect, store the authentication credentials
  
  @param request {object} reference to the express request object
  @param callback {function(error, oauth_token, oauth_token_secret)} callback function where you store the authentication credentials
  ###
  easycallback = resteasy.callback = (request, callback) ->
    recoverKeys request
    parsed_url = url.parse(request.url, true)
    protocol = (if request.socket.encrypted then "https" else "http")
    callback_url = protocol + "://" + request.headers.host + parsed_url.pathname
    if map.oauth.version is "2.0"
      oAuthClient.getOAuthAccessToken parsed_url.query.code,
        redirect_uri: callbackUrl
        response_type: "token"
        grant_type: "authorization_code"
      , (error, access_token, refresh_token) ->
        if error
          console.error "[RESTEASY].connect", error
          callback error
        else
          keys.access_token = keys.oauth_token = access_token
          keys.refresh_token = keys.oauth_token_secret = refresh_token  if refresh_token
          storeKeys request
          callback null, access_token, refresh_token

    else
      oAuthClient.getOAuthAccessToken keys.oauth_token, keys.oauth_token_secret, parsed_url.query.oauth_verifier, (error, oauth_token, oauth_token_secret, additionalParameters) ->
        keys.oauth_token = oauth_token
        keys.oauth_token_secret = oauth_token_secret
        if error
          console.error "[RESTEASY].connect", error
          callback error, null, null, additionalParameters
        else
          storeKeys request
          callback null, oauth_token, oauth_token_secret, additionalParameters


  
  ###
  REST API Call
  
  @param tokens {object-literal} Hash that should contain:
  oauth_token
  oauth_token_secret
  @param method {string} HTTP method. Values: ( GET | PUT | POST | DELETE )
  @param path {string} the url to be appended to the host.rest url
  @param callback {function(error, data)} callback function
  ###
  easyrequest = resteasy.request = (tokens, method, path, params, callback) ->
    method = method.toUpperCase()
    
    # TODO: format should not be hardcoded
    params.format = "json"
    
    # Escape values
    params = escape(params)  if method is "GET" or method is "DELETE"
    
    # Swap out tokens from URI
    path = map.hosts.rest + sprintf(path, params)
    path = map.prepQuery(path, params, keys)  if map.prepQuery
    paramAppender = "&"  if path.match(hasParameters)
    
    # console.log('[RESTEASY].request', path + paramAppender + querystring.stringify(params));
    if map.oauth.version is "2.0"
      
      # parameters: _request(method, url, headers, post_body, access_token, callback);
      if method is "GET" or method is "DELETE"
        oAuthClient._request method, path + paramAppender + querystring.stringify(params), {}, "", tokens.oauth_token, requestCallback(callback)
      else
        oAuthClient._request method, path, {}, querystring.stringify(params), tokens.oauth_token, requestCallback(callback)
    else
      switch method
        when "GET"
          oAuthClient.get path + paramAppender + querystring.stringify(params), tokens.oauth_token, tokens.oauth_token_secret, requestCallback(callback)
        when "POST"
          oAuthClient.post path, tokens.oauth_token, tokens.oauth_token_secret, params, "application/json; charset=UTF-8", requestCallback(callback)
        when "UPDATE"
          oAuthClient.put path, tokens.oauth_token, tokens.oauth_token_secret, params, "application/json; charset=UTF-8", requestCallback(callback)
        when "DELETE"
          oAuthClient["delete"] path + paramAppender + querystring.stringify(params), tokens.oauth_token, tokens.oauth_token_secret, requestCallback(callback)

# EOF 
